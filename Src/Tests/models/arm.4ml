domain ARM
{
    Registers ::= new ( r0: Integer, r1: Integer, r2: Integer, r3: Integer,
                        r4: Integer, r5: Integer, r6: Integer, r7: Integer,
                        r8: Integer, r9: Integer, r10: Integer, r11: Integer,
                        r12: Integer, r13: Integer, r14: Integer).
    CPSR ::= new ( N: Boolean, Z: Boolean, C: Boolean, V: Boolean ).
    MachineState ::= new (seq : Integer, pc: Integer, cpsr: CPSR, regs : Registers).

    GetReg ::= new (seq : Integer, pc : Integer, cpsr: CPSR, reg : Integer, r : Integer).
    GetReg(seq, pc, status, 0, r) :- MachineState(seq, pc, status, regs), r = regs.r0.
    GetReg(seq, pc, status, 1, r) :- MachineState(seq, pc, status, regs), r = regs.r1.
    GetReg(seq, pc, status, 2, r) :- MachineState(seq, pc, status, regs), r = regs.r2.
    GetReg(seq, pc, status, 3, r) :- MachineState(seq, pc, status, regs), r = regs.r3.
    GetReg(seq, pc, status, 4, r) :- MachineState(seq, pc, status, regs), r = regs.r4.
    GetReg(seq, pc, status, 5, r) :- MachineState(seq, pc, status, regs), r = regs.r5.
    GetReg(seq, pc, status, 6, r) :- MachineState(seq, pc, status, regs), r = regs.r6.
    GetReg(seq, pc, status, 7, r) :- MachineState(seq, pc, status, regs), r = regs.r7.
    GetReg(seq, pc, status, 8, r) :- MachineState(seq, pc, status, regs), r = regs.r8.
    GetReg(seq, pc, status, 9, r) :- MachineState(seq, pc, status, regs), r = regs.r9.
    GetReg(seq, pc, status, 10, r) :- MachineState(seq, pc, status, regs), r = regs.r10.
    GetReg(seq, pc, status, 11, r) :- MachineState(seq, pc, status, regs), r = regs.r11.
    GetReg(seq, pc, status, 12, r) :- MachineState(seq, pc, status, regs), r = regs.r12.
    GetReg(seq, pc, status, 13, r) :- MachineState(seq, pc, status, regs), r = regs.r13.
    GetReg(seq, pc, status, 14, r) :- MachineState(seq, pc, status, regs), r = regs.r14.

    SetState ::= new (seq: Integer, pc: Integer, status: CPSR, reg : Integer, val : Integer).

    MachineState(nseq, pc, status, Registers(val, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 0, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, val, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 1, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, val, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 2, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, val, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 3, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, val, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 4, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, val, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 5, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, val, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 6, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, val, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 7, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, val, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 8, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, val, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 9, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, val, regs.r11, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 10, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, val, regs.r12, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 11, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, val, regs.r13, regs.r14)) :-
    		   SetState(seq, pc, status, 12, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, val, regs.r14)) :-
    		   SetState(seq, pc, status, 13, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    MachineState(nseq, pc, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, val)) :-
    		   SetState(seq, pc, status, 14, val), MachineState(seq, _, _, regs), nseq = seq + 1.
    
//    Mem ::= new (seq : Integer, addr : Integer, val : Integer).
    
//    GetMem ::= new (seq : Integer, addr : Integer, val : Integer).
//    GetMem(0, addr, val) :- val = 0.
//    GetMem(seq, addr, val) :- Mem(seq, addr, v), val = v.
//    GetMem(seq, addr, val) :- no Mem(seq, addr, _), seq > 0 , prevseq=seq-1, GetMem(prevseq, addr, v), val = v.

    Add ::= new (pc : Integer, r0 : Integer, r1 : Integer, r2 : Integer).
    SetState(seq, newpc, cpsr, r2, val) :- Add(pc, r0, r1, r2), GetReg(seq, pc, status, r0, ra), GetReg(seq, pc, status, r1, rb), val = ra+rb,
        val=0, cpsr=CPSR(TRUE, FALSE, FALSE, FALSE), newpc=pc+1.
    SetState(seq, newpc, cpsr, r2, val) :- Add(pc, r0, r1, r2), GetReg(seq, pc, status, r0, ra), GetReg(seq, pc, status, r1, rb), val = ra+rb,
        val<0, cpsr=CPSR(FALSE, TRUE, FALSE, FALSE), newpc=pc+1.
    SetState(seq, newpc, cpsr, r2, val) :- Add(pc, r0, r1, r2), GetReg(seq, pc, status, r0, ra), GetReg(seq, pc, status, r1, rb), val = ra+rb,
        val>0, cpsr=CPSR(FALSE, FALSE, FALSE, FALSE), newpc=pc+1.

    Mov ::= new (pc : Integer, rs : Integer, rd : Integer).
    SetState(seq, newpc, cpsr, rd, val) :- Mov(pc, rs, rd), GetReg(seq, pc, status, rs, val),
        val=0, cpsr=CPSR(TRUE, FALSE, FALSE, FALSE), newpc=pc+1.
    SetState(seq, newpc, cpsr, rd, val) :- Mov(pc, rs, rd), GetReg(seq, pc, status, rs, val),
        val<0, cpsr=CPSR(FALSE, TRUE, FALSE, FALSE), newpc=pc+1.
    SetState(seq, newpc, cpsr, rd, val) :- Mov(pc, rs, rd), GetReg(seq, pc, status, rs, val),
        val>0, cpsr=CPSR(FALSE, FALSE, FALSE, FALSE), newpc=pc+1.
    
    BL ::= new (pc : Integer, newpc : Integer).
    MachineState(newseq,newpc,cpsr,Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, link)) :- BL(pc, newpc), MachineState(seq,pc,cpsr,regs), newseq=seq+1, link=pc+1.

    Halt ::= new (pc : Integer).

    Ret ::= new (pc : Integer).
    MachineState(newseq, regs.r14, status, Registers(regs.r0, regs.r1, regs.r2, regs.r3, regs.r4, regs.r5, regs.r6, regs.r7, regs.r8, regs.r9, regs.r10, regs.r11, regs.r12, regs.r13, regs.r14)) :-
        Ret(pc), MachineState(seq,pc,status,regs), newseq=seq+1.
    
}

model ArmTest of ARM
{
//    Mem(1, 1000, 123).

    MachineState(0, 0, CPSR(FALSE,FALSE,FALSE,FALSE), Registers(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)).
    
    Mov(0, 8, 0).
    Mov(1, 9, 1).
    BL(2, 4).
    Halt(3).

    Add(4, 0, 1, 0).
    Ret(5).
    
}
