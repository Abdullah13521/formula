=================================
         Console output          
=================================
OUT: 
OUT: []> v off
OUT: verbose off
OUT: 
OUT: []> l tests.4ml
OUT: (Compiled) tests.4ml
OUT: 
OUT: []> dt CanForms
OUT: Reduced form
OUT: domain CanForms
OUT: {
OUT:   F ::= new (Integer).
OUT:   Zero ::= { 0 }.
OUT:   G ::= new (nxt: any G + { NIL }).
OUT:   Nil ::= { NIL }.
OUT:   H ::= new (H').
OUT:   H' ::= new ({ 0 }).
OUT:   I ::= new (I').
OUT:   I' ::= new ({ RED }).
OUT:   R ::= new ({ 0, 1 }, { 0, 1 }).
OUT:   R' ::= new (Boolean, Boolean).
OUT:   Thing ::= F + G + Nil + H + H' + I + I' + R + R' + Real + String + Boolean.
OUT: 
OUT:   F(x)
OUT:     :-
OUT:       F(x), x : PosInteger;
OUT:       F(x), x : NegInteger;
OUT:       F(x), x : Zero.
OUT: 
OUT:   _(y)
OUT:     :-
OUT:       y is G(x), x : G;
OUT:       y is G(x), x : Nil.
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x = H(H'(0)).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x = I(I'(RED)).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is Thing.
OUT: 
OUT:   G(x.nxt.nxt.nxt.nxt.nxt.nxt.nxt)
OUT:     :-
OUT:       x is Thing.
OUT: 
OUT:   G(x.nxt.nxt.nxt.nxt.nxt.nxt.nxt)
OUT:     :-
OUT:       x is Thing;
OUT:       x is Thing, x = G(G(G(_))).
OUT: 
OUT:   G(x)
OUT:     :-
OUT:       x is Thing, x.nxt.nxt.nxt = G(_);
OUT:       x is Thing, x.nxt.nxt.nxt.nxt.nxt.nxt.nxt = G(_).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R(0, 0).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R(0, 1);
OUT:       x is R(1, 0);
OUT:       x is R(1, 1).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R(0, 1);
OUT:       x is R(1, 0);
OUT:       x is R(1, 1);
OUT:       x is R(0, 0).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R'(TRUE, FALSE);
OUT:       x is R'(FALSE, TRUE);
OUT:       x is R'(TRUE, TRUE).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R'(TRUE, FALSE);
OUT:       x is R'(FALSE, TRUE);
OUT:       x is R'(TRUE, TRUE);
OUT:       x is R'(FALSE, FALSE).
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R'(TRUE, y), y : Boolean;
OUT:       x is R'(y, TRUE), y : Boolean.
OUT: 
OUT:   _(x)
OUT:     :-
OUT:       x is R'(TRUE, y), y : Boolean;
OUT:       x is R'(y, TRUE), y : Boolean;
OUT:       x is R'(FALSE, FALSE).
OUT: }
OUT: 
OUT: Symbol table
OUT:   Space   |     Name      | Arity | Kind  
OUT: ----------|---------------|-------|-------
OUT:           |    Boolean    |   0   |  unn  
OUT:           |       F       |   1   |  con  
OUT:           |     FALSE     |   0   | ncnst 
OUT:           |       G       |   1   |  con  
OUT:           |       H       |   1   |  con  
OUT:           |      H'       |   1   |  con  
OUT:           |       I       |   1   |  con  
OUT:           |      I'       |   1   |  con  
OUT:           |    Integer    |   0   |  unn  
OUT:           |      NIL      |   0   | ncnst 
OUT:           |    Natural    |   0   |  unn  
OUT:           |  NegInteger   |   0   |  unn  
OUT:           |      Nil      |   0   |  unn  
OUT:           |  PosInteger   |   0   |  unn  
OUT:           |       R       |   2   |  con  
OUT:           |      R'       |   2   |  con  
OUT:           |      RED      |   0   | ncnst 
OUT:           |     Real      |   0   |  unn  
OUT:           |    String     |   0   |  unn  
OUT:           |     TRUE      |   0   | ncnst 
OUT:           |     Thing     |   0   |  unn  
OUT:           |     Zero      |   0   |  unn  
OUT:  CanForms |      Any      |   0   |  unn  
OUT:  CanForms |   Constant    |   0   |  unn  
OUT:  CanForms |     Data      |   0   |  unn  
OUT:  CanForms |   conforms    |   0   | dcnst 
OUT:  CanForms | notFunctional |   0   | dcnst 
OUT:  CanForms | notInjective  |   0   | dcnst 
OUT:  CanForms |  notInvTotal  |   0   | dcnst 
OUT:  CanForms | notRelational |   0   | dcnst 
OUT:  CanForms |   notTotal    |   0   | dcnst 
OUT: 
OUT: Type constants:  #Boolean #F #F[0] #G #G[0] #H #H' #H'[0] #H[0] #I #I' #I'[0] #I[0] #Integer #Natural #NegInteger #Nil #PosInteger #R #R' #R'[0] #R'[1] #R[0] #R[1] #Real #String #Thing #Zero CanForms.#Any CanForms.#Constant CanForms.#Data
OUT: Symbolic constants: 
OUT: Rationals: 0 1 
OUT: Strings: 
OUT: Variables: x y 
OUT: 
OUT: []> typ CanForms
OUT: + Type environment at (21, 4)
OUT:   x: Integer
OUT:   ~dc0: F
OUT:    + Type environment at (21, 12)
OUT:      x: PosInteger
OUT:      ~dc0: F(PosInteger)
OUT:    + Type environment at (22, 12)
OUT:      x: NegInteger
OUT:      ~dc0: F(NegInteger)
OUT:    + Type environment at (23, 12)
OUT:      x: {0..0}
OUT:      ~dc0: F({0..0})
OUT: + Type environment at (25, 4)
OUT:   x: G + {NIL}
OUT:   y: G
OUT:    + Type environment at (25, 12)
OUT:      x: G
OUT:      y: G(G)
OUT:    + Type environment at (26, 12)
OUT:      x: {NIL}
OUT:      y: G({NIL})
OUT: + Type environment at (28, 4)
OUT:   x: H
OUT:    + Type environment at (28, 14)
OUT:      x: H
OUT: + Type environment at (30, 4)
OUT:   x: I
OUT:    + Type environment at (30, 14)
OUT:      x: I
OUT: + Type environment at (32, 4)
OUT:   x: R' + R + I' + I + H' + H + G + F
OUT:    + Type environment at (32, 12)
OUT:      x: R' + R + I' + I + H' + H + G + F
OUT: + Type environment at (34, 4)
OUT:   x: G(G(G(G(G(G(G))))))
OUT:   ~sv0: G(G(G(G(G(G)))))
OUT:   ~sv1: G(G(G(G(G))))
OUT:   ~sv2: G(G(G(G)))
OUT:   ~sv3: G(G(G))
OUT:   ~sv4: G(G)
OUT:   ~sv5: G
OUT:   ~sv6: G + {NIL}
OUT:    + Type environment at (34, 40)
OUT:      x: G(G(G(G(G(G(G))))))
OUT:      ~sv0: G(G(G(G(G(G)))))
OUT:      ~sv1: G(G(G(G(G))))
OUT:      ~sv2: G(G(G(G)))
OUT:      ~sv3: G(G(G))
OUT:      ~sv4: G(G)
OUT:      ~sv5: G
OUT:      ~sv6: G + {NIL}
OUT: + Type environment at (36, 4)
OUT:   x: G(G(G(G(G(G(G))))))
OUT:   ~dc0: G(G(G(G)))
OUT:   ~sv0: G(G(G(G(G(G)))))
OUT:   ~sv1: G(G(G(G(G))))
OUT:   ~sv2: G(G(G(G)))
OUT:   ~sv3: G(G(G))
OUT:   ~sv4: G(G)
OUT:   ~sv5: G
OUT:   ~sv6: G + {NIL}
OUT:    + Type environment at (36, 40)
OUT:      x: G(G(G(G(G(G(G))))))
OUT:      ~sv0: G(G(G(G(G(G)))))
OUT:      ~sv1: G(G(G(G(G))))
OUT:      ~sv2: G(G(G(G)))
OUT:      ~sv3: G(G(G))
OUT:      ~sv4: G(G)
OUT:      ~sv5: G
OUT:      ~sv6: G + {NIL}
OUT:    + Type environment at (37, 40)
OUT:      x: G(G(G(G(G(G(G))))))
OUT:      ~dc0: G(G(G(G)))
OUT:      ~sv0: G(G(G(G(G(G)))))
OUT:      ~sv1: G(G(G(G(G))))
OUT:      ~sv2: G(G(G(G)))
OUT:      ~sv3: G(G(G))
OUT:      ~sv4: G(G)
OUT:      ~sv5: G
OUT:      ~sv6: G + {NIL}
OUT: + Type environment at (39, 4)
OUT:   x: G(G(G(G(G(G(G(G)))) + G)))
OUT:   ~dc0: G + {NIL}
OUT:   ~sv0: G(G(G(G(G(G(G)))) + G))
OUT:   ~sv1: G(G(G(G(G(G)))) + G)
OUT:   ~sv2: G(G(G(G(G)))) + G
OUT:   ~sv3: G(G(G(G)))
OUT:   ~sv4: G(G(G))
OUT:   ~sv5: G(G)
OUT:   ~sv6: G
OUT:    + Type environment at (39, 12)
OUT:      x: G(G(G(G)))
OUT:      ~dc0: G + {NIL}
OUT:      ~sv0: G(G(G))
OUT:      ~sv1: G(G)
OUT:      ~sv2: G
OUT:    + Type environment at (40, 12)
OUT:      x: G(G(G(G(G(G(G(G)))))))
OUT:      ~dc0: G + {NIL}
OUT:      ~sv0: G(G(G(G(G(G(G))))))
OUT:      ~sv1: G(G(G(G(G(G)))))
OUT:      ~sv2: G(G(G(G(G))))
OUT:      ~sv3: G(G(G(G)))
OUT:      ~sv4: G(G(G))
OUT:      ~sv5: G(G)
OUT:      ~sv6: G
OUT: + Type environment at (42, 4)
OUT:   x: R({0..0}, {0..0})
OUT:    + Type environment at (42, 12)
OUT:      x: R({0..0}, {0..0})
OUT: + Type environment at (44, 4)
OUT:   x: R({1..1}, {0..1}) + R({0..1}, {1..1})
OUT:    + Type environment at (44, 12)
OUT:      x: R({0..0}, {1..1})
OUT:    + Type environment at (44, 26)
OUT:      x: R({1..1}, {0..0})
OUT:    + Type environment at (44, 40)
OUT:      x: R({1..1}, {1..1})
OUT: + Type environment at (46, 4)
OUT:   x: R
OUT:    + Type environment at (46, 12)
OUT:      x: R({0..0}, {1..1})
OUT:    + Type environment at (46, 26)
OUT:      x: R({1..1}, {0..0})
OUT:    + Type environment at (46, 40)
OUT:      x: R({1..1}, {1..1})
OUT:    + Type environment at (46, 54)
OUT:      x: R({0..0}, {0..0})
OUT: + Type environment at (48, 4)
OUT:   x: R'({TRUE}, {FALSE} + {TRUE}) + R'({FALSE} + {TRUE}, {TRUE})
OUT:    + Type environment at (48, 12)
OUT:      x: R'({TRUE}, {FALSE})
OUT:    + Type environment at (48, 34)
OUT:      x: R'({FALSE}, {TRUE})
OUT:    + Type environment at (48, 56)
OUT:      x: R'({TRUE}, {TRUE})
OUT: + Type environment at (50, 4)
OUT:   x: R'
OUT:    + Type environment at (50, 12)
OUT:      x: R'({TRUE}, {FALSE})
OUT:    + Type environment at (50, 34)
OUT:      x: R'({FALSE}, {TRUE})
OUT:    + Type environment at (51, 12)
OUT:      x: R'({TRUE}, {TRUE})
OUT:    + Type environment at (51, 34)
OUT:      x: R'({FALSE}, {FALSE})
OUT: + Type environment at (53, 4)
OUT:   x: R'({TRUE}, {FALSE} + {TRUE}) + R'({FALSE} + {TRUE}, {TRUE})
OUT:   y: {FALSE} + {TRUE}
OUT:    + Type environment at (53, 12)
OUT:      x: R'({TRUE}, {FALSE} + {TRUE})
OUT:      y: {FALSE} + {TRUE}
OUT:    + Type environment at (54, 12)
OUT:      x: R'({FALSE} + {TRUE}, {TRUE})
OUT:      y: {FALSE} + {TRUE}
OUT: + Type environment at (56, 4)
OUT:   x: R'
OUT:   y: {FALSE} + {TRUE}
OUT:    + Type environment at (56, 12)
OUT:      x: R'({TRUE}, {FALSE} + {TRUE})
OUT:      y: {FALSE} + {TRUE}
OUT:    + Type environment at (57, 12)
OUT:      x: R'({FALSE} + {TRUE}, {TRUE})
OUT:      y: {FALSE} + {TRUE}
OUT:    + Type environment at (58, 12)
OUT:      x: R'({FALSE}, {FALSE})
OUT: 
OUT: []> x
OUT: 
EXIT: 0
